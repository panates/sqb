import {
    DataType,
    BaseEntity,
    Embedded,
    Column,
    Entity,
    PrimaryKey,
    AutoGenerated,
    ForeignKey,
    FieldName,
    NoUpdate,
    Parse,
    Serialize, NoInsert, NotNull, Association, hasOne, hasMany, HasOne,
} from '@sqb/connect';
import {Country} from './countries.entity';
import {PersonName} from './person-name.type';
import {CustomerTag} from '../_support/customer-tags.entity';
import {Tag} from '../_support/tags.entity';

const GenderMap = {
    M: 'Male',
    F: 'Female'
}

@Entity('customers')
export class Customer extends BaseEntity<Customer> {
    @PrimaryKey()
    @Column(DataType.BIGINT)
    @FieldName('ID')
    @AutoGenerated('increment')
    id?: number;

    @FieldName('given_name')
    givenName?: string;

    @FieldName('family_name')
    familyName?: string;

    @Embedded(PersonName)
    name: PersonName;

    @Column({
        fieldName: 'birth_date',
        dataType: DataType.DATE,
    })
    birthDate?: Date;

    @Column()
    city?: string;

    @FieldName('country_code')
    @ForeignKey(Country)
    @NotNull
    countryCode?: string;

    @Column(DataType.TIMESTAMP)
    @FieldName('created_at')
    @AutoGenerated('timestamp')
    @NoUpdate
    createdAt?: Date;

    @Column(DataType.CHAR)
    @Parse((v) => GenderMap[v] || 'Unknown')
    @Serialize((v) => ('' + v).charAt(0))
    gender: string;

    @Column(DataType.TIMESTAMP)
    @AutoGenerated('timestamp')
    @FieldName('updated_at')
    @NoInsert
    updatedAt?: Date;

    @HasOne()
    readonly country?: Country;

    @Column({defaultValue: true})
    active: boolean;

    @Association(
        hasMany(CustomerTag, 'customerId', 'id')
            .ifTarget({deleted: false})
            .hasOne(Tag, 'id', 'tagId')
            .ifTarget({active: true})
    )
    readonly tags?: Tag[];

}
