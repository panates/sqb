import {
    BaseEntity, Column, Entity, HasOne, PrimaryKey,
    LazyResolver, AutoGenerated, TransformRead, TransformWrite,
} from '@sqb/connect';
import {Country} from './countries.entity';

const GenderMap = {
    M: 'Male',
    F: 'Female',
    U: 'Unknown'
}

@Entity('customers')
export class Customer extends BaseEntity {
    @PrimaryKey()
    @Column({fieldName: 'ID', autoGenerate: 'increment'})
    id?: number;

    @Column({fieldName: 'given_name'})
    givenName?: string;

    @Column({
        fieldName: 'family_name',
        sortAscending: true,
        sortDescending: true
    })
    familyName?: string;

    @Column({fieldName: 'birth_date'})
    birthDate?: Date;

    @Column({fieldName: 'city'})
    city?: string;

    @Column({fieldName: 'country_code'})
    countryCode?: string;

    @Column({fieldName: 'created_at', update: false})
    @AutoGenerated('timestamp')
    createdAt?: Date;

    @Column({fieldName: 'gender'})
    @TransformRead((v) => GenderMap[v] || 'Unknown')
    @TransformWrite((v) => ('' + v).charAt(0))
    gender: string;

    @Column({fieldName: 'updated_at', insert: false})
    @AutoGenerated('timestamp')
    updatedAt?: Date;

    @HasOne({
        target: Country,
        column: 'countryCode',
        targetColumn: 'code'
    })
    readonly country?: Country;

    @HasOne({
        target: Country,
        column: 'countryCode',
        targetColumn: 'code',
        lazy: true
    })
    readonly countryLazy?: LazyResolver<Country>;

}
