import {
  BaseEntity,
  Column,
  DataType,
  Embedded,
  Entity,
  Link,
  Parse,
  PrimaryKey,
  Serialize,
} from '@sqb/connect';
import { Continent } from '../_support/continent.entity.js';
import { Country } from '../_support/country.entity.js';
import { CustomerTag } from '../_support/customer-tag.entity.js';
import { CustomerVip } from '../_support/customer-vip.entity.js';
import { Tag } from '../_support/tags.entity.js';
import { Address } from './address.js';
import { CustomerDetail } from './customer-detail.entity.js';
import { PersonName } from './person-name.type.js';

const GenderMap = {
  M: 'Male',
  F: 'Female',
};

@Entity('customers')
export class Customer extends BaseEntity {
  @PrimaryKey()
  @Column({
    fieldName: 'ID',
    dataType: DataType.BIGINT,
    autoGenerated: 'increment',
  })
  declare id?: number;

  @Column({ fieldName: 'given_name' })
  declare givenName?: string;

  @Column({ fieldName: 'family_name' })
  declare familyName?: string;

  @Embedded(PersonName)
  declare name: PersonName;

  @Column({
    fieldName: 'birth_date',
    dataType: DataType.DATE,
    exclusive: true,
  })
  declare birthDate?: Date;

  @Column()
  declare city?: string;

  @Column({ fieldName: 'country_code', notNull: true })
  declare countryCode?: string;

  @Column({
    fieldName: 'created_at',
    dataType: DataType.TIMESTAMP,
    autoGenerated: 'timestamp',
    noUpdate: true,
  })
  declare createdAt?: Date;

  @Column(DataType.CHAR)
  @Parse(v => GenderMap[v] || 'Unknown')
  @Serialize(v => ('' + v).charAt(0))
  declare gender: string;

  @Embedded(Address, { fieldNamePrefix: 'address_' })
  declare address: Address;

  @Column({
    fieldName: 'updated_at',
    dataType: DataType.TIMESTAMP,
    autoGenerated: 'timestamp',
    noInsert: true,
  })
  declare updatedAt?: Date;

  @Column({ default: true })
  declare active: boolean;

  @Column()
  declare vip: boolean;

  @Column({ fieldName: 'custom_data', dataType: DataType.JSON })
  declare customData: object;

  @Link({ exclusive: true })
  declare readonly country?: Country;

  @(Link({ exclusive: true }).toOne(CustomerVip, {
    sourceKey: 'id',
    targetKey: 'customerId',
  }))
  declare readonly vipDetails: CustomerVip;

  @(Link({ exclusive: true }).toOne(CustomerVip, {
    sourceKey: 'id',
    targetKey: 'customerId',
    where: { 'rank>=': 5 },
  }))
  declare readonly vvipDetails: CustomerVip;

  @(Link({ exclusive: true }).toOne(Country).toOne(Continent))
  declare readonly continent: Continent;

  @(Link({ exclusive: true }).toOne(CustomerDetail, {
    sourceKey: 'id',
    targetKey: 'customerId',
  }))
  declare readonly details: CustomerDetail;

  @(Link({ exclusive: true }).toMany(CustomerTag).toOne(Tag))
  declare readonly tags?: Tag[];
}
