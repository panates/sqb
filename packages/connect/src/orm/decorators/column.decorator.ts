import {DataType} from '@sqb/builder';
import {ColumnAutoGenerationStrategy, DataColumnOptions, EnumValue} from '../types';
import {EntityMeta} from '../metadata/entity-meta';

export function Column(type?: DataType): PropertyDecorator
export function Column(options?: DataColumnOptions): PropertyDecorator
export function Column(arg0?: DataType | DataColumnOptions): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('Symbol properties are not accepted');
        const options = typeof arg0 === 'string' ? {dataType: arg0} : arg0;
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, options);
    }
}

export function AutoGenerated(strategy: ColumnAutoGenerationStrategy): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {autoGenerated: strategy});
    }
}

export function Default(v: any): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {defaultValue: v});
    }
}

export function Enum(enumValue: EnumValue): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {enum: enumValue});
    }
}

export function Precision(precision: number, scale?: number): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {precision, scale});
    }
}

export function Length(length: number): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {length});
    }
}


export function FieldName(fieldName: string): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {fieldName})
    }
}

export function Comment(comment: string): PropertyDecorator {
    return (target: Object, propertyKey: string | symbol): void => {
        if (typeof propertyKey !== 'string')
            throw new Error('You can define a Column for only string properties');
        EntityMeta.attachTo(target.constructor)
            .setDataColumn(propertyKey, {comment});
    }
}

export function NotNull(target: Object, propertyKey: string | symbol): void {
    if (typeof propertyKey !== 'string')
        throw new Error('You can define a Column for only string properties');
    EntityMeta.attachTo(target.constructor)
        .setDataColumn(propertyKey, {notNull: true});
}

export function Hidden(target: Object, propertyKey: string | symbol): void {
    if (typeof propertyKey !== 'string')
        throw new Error('You can define a Column for only string properties');
    EntityMeta.attachTo(target.constructor)
        .setDataColumn(propertyKey, {hidden: true});
}

export function NoUpdate(target: Object, propertyKey: string | symbol): void {
    if (typeof propertyKey !== 'string')
        throw new Error('You can define a Column for only string properties');
    EntityMeta.attachTo(target.constructor)
        .setDataColumn(propertyKey, {noUpdate: true});
}

export function NoInsert(target: Object, propertyKey: string | symbol): void {
    if (typeof propertyKey !== 'string')
        throw new Error('You can define a Column for only string properties');
    EntityMeta.attachTo(target.constructor)
        .setDataColumn(propertyKey, {noInsert: true});
}
