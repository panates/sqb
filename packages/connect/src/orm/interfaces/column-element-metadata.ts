import _ from 'lodash';
import {DataType} from '@sqb/builder';
import type {EntityModel} from '../model/entity-model';
import type {
    ColumnAutoGenerationStrategy,
    ColumnTransformFunction,
    DataPropertyOptions,
    DefaultValueGetter,
    EnumValue,
    FieldValue,
} from '../orm.type';
import {ElementMetadata} from './element-metadata';

export interface ColumnElementMetadata extends ElementMetadata {
    readonly kind: 'column';
    fieldName: string;
    dataType?: DataType;
    type?: Function;

    /**
     * Field comment
     */
    comment?: string;

    /**
     * Column's default value
     */
    default?: FieldValue | DefaultValueGetter;

    /**
     * Indicates if column data is an array
     */
    isArray?: boolean;

    /**
     * Indicates enum values
     */
    enum?: EnumValue;

    /**
     * Character or byte length of column
     */
    length?: number;

    /**
     * The precision for a decimal field
     */
    precision?: number;

    /**
     * The scale for a decimal field
     */
    scale?: number;

    /**
     * Fields's collation.
     */
    collation?: string;

    /**
     * Indicates auto generation strategy
     */
    autoGenerated?: ColumnAutoGenerationStrategy;

    /**
     * Indicates if column value can be null
     */
    notNull?: boolean;

    /**
     * Indicates whether or not to hide this column by default when making queries.
     */
    hidden?: boolean;

    /**
     * Indicates if column value is used in update queries
     */
    noUpdate?: boolean;

    /**
     * Indicates if column value is used in insert queries
     */
    noInsert?: boolean;

    parse?: ColumnTransformFunction;
    serialize?: ColumnTransformFunction;

}

export namespace ColumnElementMetadata {

    export function create(entity: EntityModel, name: string, options: DataPropertyOptions = {}): ColumnElementMetadata {
        const result: ColumnElementMetadata = {
            kind: 'column',
            entity,
            name,
            fieldName: name
        }
        if (options)
            ColumnElementMetadata.assign(result, options);
        return result;
    }


    export function assign(target: ColumnElementMetadata, options: DataPropertyOptions) {
        Object.assign(target, _.omit(options, ['entity', 'name', 'kind']));
    }

    export function checkEnumValue(col: ColumnElementMetadata, v: FieldValue) {
        if (v === undefined || !col.enum || (v == null && !col.notNull))
            return;
        const enumKeys = Array.isArray(col.enum) ? col.enum : Object.keys(col.enum);
        if (!enumKeys.includes(v))
            throw new Error(`${col.entity.name}.${col.name} value must be one of (${enumKeys})`);
    }
}
